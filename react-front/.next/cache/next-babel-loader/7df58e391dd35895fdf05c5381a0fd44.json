{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchNote),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNote),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNoteList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST } from '../actions';\nimport next from 'next';\n\nfunction fetchNote() {\n  return _regeneratorRuntime.wrap(function fetchNote$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call();\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: '',\n            data: ''\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          next(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchFetchNote() {\n  return _regeneratorRuntime.wrap(function watchFetchNote$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchFetchNoteList() {\n  return _regeneratorRuntime.wrap(function watchFetchNoteList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/post.js"],"names":["fetchNote","watchFetchNote","watchFetchNoteList","postSaga","all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","next","type","data","console","error","fetchNoteList"],"mappings":";;oDAKUA,S;qDAYAC,c;qDAGAC,kB;qDAGeC,Q;;AAvBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAe,oBAAf;AACA,SAASC,uBAAT,EAAkCC,kBAAlC,QAA4D,YAA5D;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAAUX,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMM,IAAI,EAAV;;AAFF;AAAA;AAGE,iBAAMC,GAAG,CAAC;AACTK,YAAAA,IAAI,EAAE,EADG;AAETC,YAAAA,IAAI,EAAE;AAFG,WAAD,CAAT;;AAHF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQEC,UAAAA,OAAO,CAACC,KAAR;AACAJ,UAAAA,IAAI,aAAJ;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUV,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMO,UAAU,CAACE,kBAAD,EAAqBV,SAArB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUE,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACC,uBAAD,EAA0BO,aAA1B,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,cAAD,CAAL,EAAuBI,IAAI,CAACH,kBAAD,CAA3B,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST } from '../actions';\nimport next from 'next';\n\nfunction* fetchNote() {\n\ttry {\n\t\tyield call();\n\t\tyield put({\n\t\t\ttype: '',\n\t\t\tdata: '',\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tnext(err);\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nexport default function* postSaga() {\n\tyield all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n}\n"]},"metadata":{},"sourceType":"module"}