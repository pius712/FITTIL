{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE, UPLOAD_NOTE_REQUEST, UPLOAD_NOTE_SUCCESS, UPLOAD_NOTE_FAILURE, FETCH_NOTE_LENGTH_REQUEST, FETCH_NOTE_LENGTH_SUCCESS, FETCH_NOTE_LENGTH_FAILURE, EDIT_NOTE_REQUEST, EDIT_NOTE_SUCCESS, EDIT_NOTE_FAILURE, DELETE_NOTE_REQUEST, DELETE_NOTE_SUCCESS, DELETE_NOTE_FAILURE, MAKE_NOTE_PUBLIC_REQUEST, MAKE_NOTE_PUBLIC_SUCCESS, MAKE_NOTE_PUBLIC_FAILURE, MAKE_NOTE_PRIVATE_REQUEST, MAKE_NOTE_PRIVATE_SUCCESS, MAKE_NOTE_PRIVATE_FAILURE } from '../actions';\nimport { fetchNoteAPI, fetchNoteListAPI, uploadNoteAPI, fetchNoteLengthAPI, editNoteAPI, delteNoteAPI, makeNotePublicAPI, makeNotePrivateAPI } from '../API'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction* fetchNote(action) {\n  try {\n    const result = yield call(fetchNoteAPI, action.data);\n    yield put({\n      type: FETCH_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* fetchNoteList(action) {\n  try {\n    const result = yield call(fetchNoteListAPI, action.data);\n    yield put({\n      type: FETCH_NOTE_LIST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* uploadNote(action) {\n  try {\n    const result = yield call(uploadNoteAPI, action.data);\n    yield put({\n      type: UPLOAD_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* fetchNoteLength() {\n  try {\n    const result = yield call(fetchNoteLengthAPI);\n    yield put({\n      type: FETCH_NOTE_LENGTH_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    err.response.data;\n  }\n}\n\nfunction* editNote(action) {\n  try {\n    const result = yield call(editNoteAPI, action.data);\n    yield put({\n      type: EDIT_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: EDIT_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* deleteNote(action) {\n  try {\n    const result = yield call(delteNoteAPI, action.data);\n    yield put({\n      type: DELETE_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: DELETE_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* makeNotePublic(action) {\n  try {\n    const result = yield call(makeNotePublicAPI, action.data);\n    yield put({\n      type: MAKE_NOTE_PUBLIC_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: MAKE_NOTE_PUBLIC_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* makeNotePrivate(action) {\n  try {\n    const result = yield call(makeNotePrivateAPI, action.data);\n    yield put({\n      type: MAKE_NOTE_PRIVATE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: MAKE_NOTE_PRIVATE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFetchNote() {\n  yield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\n\nfunction* watchFetchNoteList() {\n  yield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\n\nfunction* watchUploadNote() {\n  yield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\n\nfunction* watchFecthNoteLength() {\n  yield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n} // 노트 수정\n\n\nfunction* watchEditNote() {\n  yield takeLatest(EDIT_NOTE_REQUEST, editNote);\n} // 노트 삭제\n\n\nfunction* watchDeleteNote() {\n  yield takeLatest(DELETE_NOTE_REQUEST, deleteNote);\n} // 노트 public 전환\n\n\nfunction* watchMakeNotePublic() {\n  yield takeLatest(MAKE_NOTE_PUBLIC_REQUEST, makeNotePublic);\n} // 노트 private 전환\n\n\nfunction* watchMakeNotePrivate() {\n  yield takeLatest(MAKE_NOTE_PRIVATE_REQUEST, makeNotePrivate);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchFetchNote), fork(watchFetchNoteList), fork(watchUploadNote), fork(watchFecthNoteLength), fork(watchEditNote), fork(watchDeleteNote), fork(watchMakeNotePublic), fork(watchMakeNotePrivate)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/note.js"],"names":["all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","UPLOAD_NOTE_REQUEST","UPLOAD_NOTE_SUCCESS","UPLOAD_NOTE_FAILURE","FETCH_NOTE_LENGTH_REQUEST","FETCH_NOTE_LENGTH_SUCCESS","FETCH_NOTE_LENGTH_FAILURE","EDIT_NOTE_REQUEST","EDIT_NOTE_SUCCESS","EDIT_NOTE_FAILURE","DELETE_NOTE_REQUEST","DELETE_NOTE_SUCCESS","DELETE_NOTE_FAILURE","MAKE_NOTE_PUBLIC_REQUEST","MAKE_NOTE_PUBLIC_SUCCESS","MAKE_NOTE_PUBLIC_FAILURE","MAKE_NOTE_PRIVATE_REQUEST","MAKE_NOTE_PRIVATE_SUCCESS","MAKE_NOTE_PRIVATE_FAILURE","fetchNoteAPI","fetchNoteListAPI","uploadNoteAPI","fetchNoteLengthAPI","editNoteAPI","delteNoteAPI","makeNotePublicAPI","makeNotePrivateAPI","fetchNote","action","result","data","type","err","console","error","response","fetchNoteList","uploadNote","fetchNoteLength","editNote","deleteNote","makeNotePublic","makeNotePrivate","watchFetchNote","watchFetchNoteList","watchUploadNote","watchFecthNoteLength","watchEditNote","watchDeleteNote","watchMakeNotePublic","watchMakeNotePrivate","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n\tUPLOAD_NOTE_REQUEST,\n\tUPLOAD_NOTE_SUCCESS,\n\tUPLOAD_NOTE_FAILURE,\n\tFETCH_NOTE_LENGTH_REQUEST,\n\tFETCH_NOTE_LENGTH_SUCCESS,\n\tFETCH_NOTE_LENGTH_FAILURE,\n\tEDIT_NOTE_REQUEST,\n\tEDIT_NOTE_SUCCESS,\n\tEDIT_NOTE_FAILURE,\n\tDELETE_NOTE_REQUEST,\n\tDELETE_NOTE_SUCCESS,\n\tDELETE_NOTE_FAILURE,\n\tMAKE_NOTE_PUBLIC_REQUEST,\n\tMAKE_NOTE_PUBLIC_SUCCESS,\n\tMAKE_NOTE_PUBLIC_FAILURE,\n\tMAKE_NOTE_PRIVATE_REQUEST,\n\tMAKE_NOTE_PRIVATE_SUCCESS,\n\tMAKE_NOTE_PRIVATE_FAILURE,\n} from '../actions';\nimport {\n\tfetchNoteAPI,\n\tfetchNoteListAPI,\n\tuploadNoteAPI,\n\tfetchNoteLengthAPI,\n\teditNoteAPI,\n\tdelteNoteAPI,\n\tmakeNotePublicAPI,\n\tmakeNotePrivateAPI,\n} from '../API';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteListAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadNote(action) {\n\ttry {\n\t\tconst result = yield call(uploadNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteLength() {\n\ttry {\n\t\tconst result = yield call(fetchNoteLengthAPI);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LENGTH_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\terr.response.data;\n\t}\n}\nfunction* editNote(action) {\n\ttry {\n\t\tconst result = yield call(editNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: EDIT_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: EDIT_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* deleteNote(action) {\n\ttry {\n\t\tconst result = yield call(delteNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: DELETE_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: DELETE_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* makeNotePublic(action) {\n\ttry {\n\t\tconst result = yield call(makeNotePublicAPI, action.data);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PUBLIC_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PUBLIC_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* makeNotePrivate(action) {\n\ttry {\n\t\tconst result = yield call(makeNotePrivateAPI, action.data);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PRIVATE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PRIVATE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nfunction* watchUploadNote() {\n\tyield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\nfunction* watchFecthNoteLength() {\n\tyield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n}\n// 노트 수정\nfunction* watchEditNote() {\n\tyield takeLatest(EDIT_NOTE_REQUEST, editNote);\n}\n// 노트 삭제\nfunction* watchDeleteNote() {\n\tyield takeLatest(DELETE_NOTE_REQUEST, deleteNote);\n}\n// 노트 public 전환\nfunction* watchMakeNotePublic() {\n\tyield takeLatest(MAKE_NOTE_PUBLIC_REQUEST, makeNotePublic);\n}\n// 노트 private 전환\nfunction* watchMakeNotePrivate() {\n\tyield takeLatest(MAKE_NOTE_PRIVATE_REQUEST, makeNotePrivate);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchFetchNote),\n\t\tfork(watchFetchNoteList),\n\t\tfork(watchUploadNote),\n\t\tfork(watchFecthNoteLength),\n\t\tfork(watchEditNote),\n\t\tfork(watchDeleteNote),\n\t\tfork(watchMakeNotePublic),\n\t\tfork(watchMakeNotePrivate),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}