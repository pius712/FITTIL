{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(registerUSer),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginUser),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRegisterUser),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoginUser),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogoutUser),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER_REQUEST, LOGOUT_USER_SUCCESS } from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API'; //회원가입\n\nfunction registerUSer(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function registerUSer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(registerUserAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 10;\n          return put({\n            type: REGISTER_USER_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n} // 로그인\n\n\nfunction loginUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loginUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginUserAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOGIN_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOGIN_USER_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} //로그아웃\n\n\nfunction logoutUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logoutUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logoutUserAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOGOUT_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOGOUT_USER_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // 회원 가입\n\n\nfunction watchRegisterUser() {\n  return _regeneratorRuntime.wrap(function watchRegisterUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(REGISTER_USER_REQUEST, registerUSer);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // 로그인\n\n\nfunction watchLoginUser() {\n  return _regeneratorRuntime.wrap(function watchLoginUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOGIN_USER_REQUEST, loginUser);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // 로그아웃\n\n\nfunction watchLogoutUser() {\n  return _regeneratorRuntime.wrap(function watchLogoutUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all(fork(watchRegisterUser), fork(watchLoginUser), fork(watchLogoutUser));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/user.js"],"names":["registerUSer","loginUser","logoutUser","watchRegisterUser","watchLoginUser","watchLogoutUser","userSaga","all","fork","call","put","takeLatest","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER_REQUEST","LOGOUT_USER_SUCCESS","registerUserAPI","loginUserAPI","logoutUserAPI","action","data","result","type","error","response","LOGOUT_USER_FAILURE"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {\n\tREGISTER_USER_REQUEST,\n\tREGISTER_USER_SUCCESS,\n\tREGISTER_USER_FAILURE,\n\tLOGIN_USER_REQUEST,\n\tLOGIN_USER_SUCCESS,\n\tLOGIN_USER_FAILURE,\n\tLOGOUT_USER_REQUEST,\n\tLOGOUT_USER_SUCCESS,\n} from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API';\n//회원가입\nfunction* registerUSer(action) {\n\ttry {\n\t\tconst result = yield call(registerUserAPI, action.data);\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 로그인\nfunction* loginUser(action) {\n\ttry {\n\t\tconst result = yield call(loginUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n//로그아웃\nfunction* logoutUser(action) {\n\ttry {\n\t\tconst result = yield call(logoutUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 회원 가입\nfunction* watchRegisterUser() {\n\tyield takeLatest(REGISTER_USER_REQUEST, registerUSer);\n}\n\n// 로그인\nfunction* watchLoginUser() {\n\tyield takeLatest(LOGIN_USER_REQUEST, loginUser);\n}\n// 로그아웃\n\nfunction* watchLogoutUser() {\n\tyield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\nexport default function* userSaga() {\n\tyield all(\n\t\tfork(watchRegisterUser),\n\t\tfork(watchLoginUser),\n\t\tfork(watchLogoutUser),\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}