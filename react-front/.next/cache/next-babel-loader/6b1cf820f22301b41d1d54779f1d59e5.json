{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchNote),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchNoteList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadNote),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNote),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNoteList),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadNote),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchFecthNoteLength),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE, UPLOAD_NOTE_REQUEST, UPLOAD_NOTE_SUCCESS, UPLOAD_NOTE_FAILURE, FETCH_NOTE_LENGTH_REQUEST, FETCH_NOTE_LENGTH_SUCCESS, FETCH_NOTE_LENGTH_FAILURE } from '../actions';\nimport { fetchNoteAPI, fetchNoteListAPI, uploadNoteAPI } from '../API'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction fetchNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNote$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(fetchNoteAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: FETCH_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: FETCH_NOTE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction fetchNoteList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNoteList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(fetchNoteListAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: FETCH_NOTE_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: FETCH_NOTE_LIST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction uploadNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadNote$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadNoteAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: UPLOAD_NOTE_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchFetchNote() {\n  return _regeneratorRuntime.wrap(function watchFetchNote$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchFetchNoteList() {\n  return _regeneratorRuntime.wrap(function watchFetchNoteList$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchUploadNote() {\n  return _regeneratorRuntime.wrap(function watchUploadNote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchFecthNoteLength() {\n  return _regeneratorRuntime.wrap(function watchFecthNoteLength$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchFetchNote), fork(watchFetchNoteList), fork(watchUploadNote), fork(watchFecthNoteLength)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/note.js"],"names":["fetchNote","fetchNoteList","uploadNote","watchFetchNote","watchFetchNoteList","watchUploadNote","watchFecthNoteLength","postSaga","all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","UPLOAD_NOTE_REQUEST","UPLOAD_NOTE_SUCCESS","UPLOAD_NOTE_FAILURE","FETCH_NOTE_LENGTH_REQUEST","FETCH_NOTE_LENGTH_SUCCESS","FETCH_NOTE_LENGTH_FAILURE","fetchNoteAPI","fetchNoteListAPI","uploadNoteAPI","action","data","result","type","console","error","response","fetchNoteLength"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n\tUPLOAD_NOTE_REQUEST,\n\tUPLOAD_NOTE_SUCCESS,\n\tUPLOAD_NOTE_FAILURE,\n\tFETCH_NOTE_LENGTH_REQUEST,\n\tFETCH_NOTE_LENGTH_SUCCESS,\n\tFETCH_NOTE_LENGTH_FAILURE,\n} from '../actions';\nimport { fetchNoteAPI, fetchNoteListAPI, uploadNoteAPI } from '../API';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteListAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadNote(action) {\n\ttry {\n\t\tconst result = yield call(uploadNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nfunction* watchUploadNote() {\n\tyield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\nfunction* watchFecthNoteLength() {\n\tyield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchFetchNote),\n\t\tfork(watchFetchNoteList),\n\t\tfork(watchUploadNote),\n\t\tfork(watchFecthNoteLength),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}