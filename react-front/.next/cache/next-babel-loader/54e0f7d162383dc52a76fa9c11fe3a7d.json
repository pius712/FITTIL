{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE } from '../actions';\nimport next from 'next';\nimport { Result } from 'antd';\nimport { fetchNoteAPI } from '../API'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction* fetchNote(action) {\n  try {\n    const result = yield call(fetchNoteAPI);\n    yield put({\n      type: FETCH_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* fetchNoteList(action) {\n  try {\n    const result = yield call(fetchNoteLISTAPI);\n    yield put({\n      type: FETCH_NOTE_LIST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFetchNote() {\n  yield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\n\nfunction* watchFetchNoteList() {\n  yield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","next","Result","fetchNoteAPI","fetchNote","action","result","type","data","err","console","error","response","fetchNoteList","fetchNoteLISTAPI","watchFetchNote","watchFetchNoteList","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAe,oBAAf;AACA,SACCC,uBADD,EAECC,kBAFD,EAGCC,uBAHD,EAICC,kBAJD,EAKCC,kBALD,EAMCC,uBAND,QAOO,YAPP;AAQA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,YAAT,QAA6B,QAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUC,SAAV,CAAoBC,MAApB,EAA4B;AAC3B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACW,YAAD,CAAzB;AACA,UAAMV,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAER,kBADG;AAETS,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOC,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMhB,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAET,kBADG;AAETa,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD;;AACD,UAAUK,aAAV,CAAwBR,MAAxB,EAAgC;AAC/B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACsB,gBAAD,CAAzB;AACA,UAAMrB,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEV,uBADG;AAETW,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOC,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMhB,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEP,uBADG;AAETW,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD;;AACD,UAAUO,cAAV,GAA2B;AAC1B,QAAMrB,UAAU,CAACE,kBAAD,EAAqBQ,SAArB,CAAhB;AACA;;AACD,UAAUY,kBAAV,GAA+B;AAC9B,QAAMtB,UAAU,CAACC,uBAAD,EAA0BkB,aAA1B,CAAhB;AACA;;AACD,eAAe,UAAUI,QAAV,GAAqB;AACnC,QAAM3B,GAAG,CAAC,CAACC,IAAI,CAACwB,cAAD,CAAL,EAAuBxB,IAAI,CAACyB,kBAAD,CAA3B,CAAD,CAAT;AACA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n} from '../actions';\nimport next from 'next';\nimport { Result } from 'antd';\nimport { fetchNoteAPI } from '../API';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteAPI);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteLISTAPI);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nexport default function* postSaga() {\n\tyield all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n}\n"]},"metadata":{},"sourceType":"module"}