{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchNote),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchNoteList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadNote),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchNoteLength),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(editNote),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(deleteNote),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(makeNotePublic),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(makeNotePrivate),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(reportNote),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNote),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNoteList),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadNote),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchFecthNoteLength),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchEditNote),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeleteNote),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchMakeNotePublic),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchMakeNotePrivate),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchReportNote),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE, UPLOAD_NOTE_REQUEST, UPLOAD_NOTE_SUCCESS, UPLOAD_NOTE_FAILURE, FETCH_NOTE_LENGTH_REQUEST, FETCH_NOTE_LENGTH_SUCCESS, FETCH_NOTE_LENGTH_FAILURE, EDIT_NOTE_REQUEST, EDIT_NOTE_SUCCESS, EDIT_NOTE_FAILURE, DELETE_NOTE_REQUEST, DELETE_NOTE_SUCCESS, DELETE_NOTE_FAILURE, MAKE_NOTE_PUBLIC_REQUEST, MAKE_NOTE_PUBLIC_SUCCESS, MAKE_NOTE_PUBLIC_FAILURE, MAKE_NOTE_PRIVATE_REQUEST, MAKE_NOTE_PRIVATE_SUCCESS, MAKE_NOTE_PRIVATE_FAILURE, REPORT_NOTE_REQUEST, REPORT_NOTE_FAILURE, REPORT_NOTE_SUCCESS } from '../actions';\nimport { fetchNoteAPI, fetchNoteListAPI, uploadNoteAPI, fetchNoteLengthAPI, editNoteAPI, delteNoteAPI, makeNotePublicAPI, makeNotePrivateAPI, reportNoteAPI } from '../API'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction fetchNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNote$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(fetchNoteAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: FETCH_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: FETCH_NOTE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction fetchNoteList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNoteList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(fetchNoteListAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: FETCH_NOTE_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: FETCH_NOTE_LIST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction uploadNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadNote$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadNoteAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: UPLOAD_NOTE_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction fetchNoteLength() {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNoteLength$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(fetchNoteLengthAPI);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: FETCH_NOTE_LENGTH_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: FETCH_NOTE_LENGTH_FAILURE,\n            error: _context4.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction editNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function editNote$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(editNoteAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: EDIT_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: EDIT_NOTE_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction deleteNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function deleteNote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(delteNoteAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: DELETE_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: DELETE_NOTE_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction makeNotePublic(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function makeNotePublic$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(makeNotePublicAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: MAKE_NOTE_PUBLIC_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: MAKE_NOTE_PUBLIC_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction makeNotePrivate(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function makeNotePrivate$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(makeNotePrivateAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: MAKE_NOTE_PRIVATE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: MAKE_NOTE_PRIVATE_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction reportNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function reportNote$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(reportNoteAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: REPORT_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: REPORT_NOTE_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchFetchNote() {\n  return _regeneratorRuntime.wrap(function watchFetchNote$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchFetchNoteList() {\n  return _regeneratorRuntime.wrap(function watchFetchNoteList$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUploadNote() {\n  return _regeneratorRuntime.wrap(function watchUploadNote$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchFecthNoteLength() {\n  return _regeneratorRuntime.wrap(function watchFecthNoteLength$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n} // 노트 수정\n\n\nfunction watchEditNote() {\n  return _regeneratorRuntime.wrap(function watchEditNote$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(EDIT_NOTE_REQUEST, editNote);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} // 노트 삭제\n\n\nfunction watchDeleteNote() {\n  return _regeneratorRuntime.wrap(function watchDeleteNote$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(DELETE_NOTE_REQUEST, deleteNote);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n} // 노트 public 전환\n\n\nfunction watchMakeNotePublic() {\n  return _regeneratorRuntime.wrap(function watchMakeNotePublic$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(MAKE_NOTE_PUBLIC_REQUEST, makeNotePublic);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} // 노트 private 전환\n\n\nfunction watchMakeNotePrivate() {\n  return _regeneratorRuntime.wrap(function watchMakeNotePrivate$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(MAKE_NOTE_PRIVATE_REQUEST, makeNotePrivate);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n} // 노트 신고하기\n\n\nfunction watchReportNote() {\n  return _regeneratorRuntime.wrap(function watchReportNote$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(REPORT_NOTE_REQUEST, reportNote);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return all([fork(watchFetchNote), fork(watchFetchNoteList), fork(watchUploadNote), fork(watchFecthNoteLength), fork(watchEditNote), fork(watchDeleteNote), fork(watchMakeNotePublic), fork(watchMakeNotePrivate), fork(watchReportNote)]);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/note.js"],"names":["fetchNote","fetchNoteList","uploadNote","fetchNoteLength","editNote","deleteNote","makeNotePublic","makeNotePrivate","reportNote","watchFetchNote","watchFetchNoteList","watchUploadNote","watchFecthNoteLength","watchEditNote","watchDeleteNote","watchMakeNotePublic","watchMakeNotePrivate","watchReportNote","postSaga","all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","UPLOAD_NOTE_REQUEST","UPLOAD_NOTE_SUCCESS","UPLOAD_NOTE_FAILURE","FETCH_NOTE_LENGTH_REQUEST","FETCH_NOTE_LENGTH_SUCCESS","FETCH_NOTE_LENGTH_FAILURE","EDIT_NOTE_REQUEST","EDIT_NOTE_SUCCESS","EDIT_NOTE_FAILURE","DELETE_NOTE_REQUEST","DELETE_NOTE_SUCCESS","DELETE_NOTE_FAILURE","MAKE_NOTE_PUBLIC_REQUEST","MAKE_NOTE_PUBLIC_SUCCESS","MAKE_NOTE_PUBLIC_FAILURE","MAKE_NOTE_PRIVATE_REQUEST","MAKE_NOTE_PRIVATE_SUCCESS","MAKE_NOTE_PRIVATE_FAILURE","REPORT_NOTE_REQUEST","REPORT_NOTE_FAILURE","REPORT_NOTE_SUCCESS","fetchNoteAPI","fetchNoteListAPI","uploadNoteAPI","fetchNoteLengthAPI","editNoteAPI","delteNoteAPI","makeNotePublicAPI","makeNotePrivateAPI","reportNoteAPI","action","data","result","type","console","error","response"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n\tUPLOAD_NOTE_REQUEST,\n\tUPLOAD_NOTE_SUCCESS,\n\tUPLOAD_NOTE_FAILURE,\n\tFETCH_NOTE_LENGTH_REQUEST,\n\tFETCH_NOTE_LENGTH_SUCCESS,\n\tFETCH_NOTE_LENGTH_FAILURE,\n\tEDIT_NOTE_REQUEST,\n\tEDIT_NOTE_SUCCESS,\n\tEDIT_NOTE_FAILURE,\n\tDELETE_NOTE_REQUEST,\n\tDELETE_NOTE_SUCCESS,\n\tDELETE_NOTE_FAILURE,\n\tMAKE_NOTE_PUBLIC_REQUEST,\n\tMAKE_NOTE_PUBLIC_SUCCESS,\n\tMAKE_NOTE_PUBLIC_FAILURE,\n\tMAKE_NOTE_PRIVATE_REQUEST,\n\tMAKE_NOTE_PRIVATE_SUCCESS,\n\tMAKE_NOTE_PRIVATE_FAILURE,\n\tREPORT_NOTE_REQUEST,\n\tREPORT_NOTE_FAILURE,\n\tREPORT_NOTE_SUCCESS,\n} from '../actions';\nimport {\n\tfetchNoteAPI,\n\tfetchNoteListAPI,\n\tuploadNoteAPI,\n\tfetchNoteLengthAPI,\n\teditNoteAPI,\n\tdelteNoteAPI,\n\tmakeNotePublicAPI,\n\tmakeNotePrivateAPI,\n\treportNoteAPI,\n} from '../API';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteListAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadNote(action) {\n\ttry {\n\t\tconst result = yield call(uploadNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteLength() {\n\ttry {\n\t\tconst result = yield call(fetchNoteLengthAPI);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LENGTH_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LENGTH_FAILURE,\n\t\t\terror: err.response,\n\t\t});\n\t}\n}\nfunction* editNote(action) {\n\ttry {\n\t\tconst result = yield call(editNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: EDIT_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: EDIT_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* deleteNote(action) {\n\ttry {\n\t\tconst result = yield call(delteNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: DELETE_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: DELETE_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* makeNotePublic(action) {\n\ttry {\n\t\tconst result = yield call(makeNotePublicAPI, action.data);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PUBLIC_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PUBLIC_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* makeNotePrivate(action) {\n\ttry {\n\t\tconst result = yield call(makeNotePrivateAPI, action.data);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PRIVATE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: MAKE_NOTE_PRIVATE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* reportNote(action) {\n\ttry {\n\t\tconst result = yield call(reportNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: REPORT_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: REPORT_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nfunction* watchUploadNote() {\n\tyield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\nfunction* watchFecthNoteLength() {\n\tyield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n}\n// 노트 수정\nfunction* watchEditNote() {\n\tyield takeLatest(EDIT_NOTE_REQUEST, editNote);\n}\n// 노트 삭제\nfunction* watchDeleteNote() {\n\tyield takeLatest(DELETE_NOTE_REQUEST, deleteNote);\n}\n// 노트 public 전환\nfunction* watchMakeNotePublic() {\n\tyield takeLatest(MAKE_NOTE_PUBLIC_REQUEST, makeNotePublic);\n}\n// 노트 private 전환\nfunction* watchMakeNotePrivate() {\n\tyield takeLatest(MAKE_NOTE_PRIVATE_REQUEST, makeNotePrivate);\n}\n// 노트 신고하기\nfunction* watchReportNote() {\n\tyield takeLatest(REPORT_NOTE_REQUEST, reportNote);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchFetchNote),\n\t\tfork(watchFetchNoteList),\n\t\tfork(watchUploadNote),\n\t\tfork(watchFecthNoteLength),\n\t\tfork(watchEditNote),\n\t\tfork(watchDeleteNote),\n\t\tfork(watchMakeNotePublic),\n\t\tfork(watchMakeNotePrivate),\n\t\tfork(watchReportNote),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}