{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport { REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER_REQUEST, LOGOUT_USER_SUCCESS, LOGOUT_USER_FAILURE } from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API'; //회원가입\n\nfunction* registerUser(action) {\n  try {\n    console.log('resgister user');\n    const result = yield call(registerUserAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REGISTER_USER_SUCCESS,\n      data: result.data // data: action.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REGISTER_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 로그인\n\n\nfunction* loginUser(action) {\n  try {\n    // const result = yield call(loginUserAPI, action.data);\n    yield put({\n      type: LOGIN_USER_SUCCESS,\n      // data: result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGIN_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} //로그아웃\n\n\nfunction* logoutUser(action) {\n  try {\n    // const result = yield call(logoutUserAPI, action.data);\n    yield put({\n      type: LOGOUT_USER_SUCCESS,\n      // data: result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGOUT_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 회원 가입\n\n\nfunction* watchRegisterUser() {\n  console.log('watchRegister');\n  yield takeLatest(REGISTER_USER_REQUEST, registerUser);\n} // 로그인\n\n\nfunction* watchLoginUser() {\n  console.log('watchLgoinUser');\n  yield takeLatest(LOGIN_USER_REQUEST, loginUser);\n} // 로그아웃\n\n\nfunction* watchLogoutUser() {\n  yield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchRegisterUser), fork(watchLoginUser), fork(watchLogoutUser)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER_REQUEST","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAILURE","registerUserAPI","loginUserAPI","logoutUserAPI","registerUser","action","console","log","result","data","type","err","error","response","loginUser","logoutUser","watchRegisterUser","watchLoginUser","watchLogoutUser","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SACCC,qBADD,EAECC,qBAFD,EAGCC,qBAHD,EAICC,kBAJD,EAKCC,kBALD,EAMCC,kBAND,EAOCC,mBAPD,EAQCC,mBARD,EASCC,mBATD,QAUO,YAVP;AAWA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,QAA6D,QAA7D,C,CACA;;AACA,UAAUC,YAAV,CAAuBC,MAAvB,EAA+B;AAC9B,MAAI;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACa,eAAD,EAAkBI,MAAM,CAACI,IAAzB,CAAzB;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEjB,qBADG;AAETgB,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GATD,CASE,OAAOE,GAAP,EAAY;AACbL,IAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACA,UAAMtB,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEhB,qBADG;AAETkB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUK,SAAV,CAAoBT,MAApB,EAA4B;AAC3B,MAAI;AACH;AACA,UAAMhB,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEd,kBADG;AAET;AACAa,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAHJ,KAAD,CAAT;AAKA,GAPD,CAOE,OAAOE,GAAP,EAAY;AACb,UAAMtB,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEb,kBADG;AAETe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUM,UAAV,CAAqBV,MAArB,EAA6B;AAC5B,MAAI;AACH;AACA,UAAMhB,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEX,mBADG;AAET;AACAU,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAHJ,KAAD,CAAT;AAKA,GAPD,CAOE,OAAOE,GAAP,EAAY;AACb,UAAMtB,GAAG,CAAC;AACTqB,MAAAA,IAAI,EAAEV,mBADG;AAETY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUO,iBAAV,GAA8B;AAC7BV,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMjB,UAAU,CAACE,qBAAD,EAAwBY,YAAxB,CAAhB;AACA,C,CAED;;;AACA,UAAUa,cAAV,GAA2B;AAC1BX,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAMjB,UAAU,CAACK,kBAAD,EAAqBmB,SAArB,CAAhB;AACA,C,CACD;;;AAEA,UAAUI,eAAV,GAA4B;AAC3B,QAAM5B,UAAU,CAACQ,mBAAD,EAAsBiB,UAAtB,CAAhB;AACA;;AACD,eAAe,UAAUI,QAAV,GAAqB;AACnC,QAAMjC,GAAG,CAAC,CACTC,IAAI,CAAC6B,iBAAD,CADK,EAET7B,IAAI,CAAC8B,cAAD,CAFK,EAGT9B,IAAI,CAAC+B,eAAD,CAHK,CAAD,CAAT;AAKA","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport {\n\tREGISTER_USER_REQUEST,\n\tREGISTER_USER_SUCCESS,\n\tREGISTER_USER_FAILURE,\n\tLOGIN_USER_REQUEST,\n\tLOGIN_USER_SUCCESS,\n\tLOGIN_USER_FAILURE,\n\tLOGOUT_USER_REQUEST,\n\tLOGOUT_USER_SUCCESS,\n\tLOGOUT_USER_FAILURE,\n} from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API';\n//회원가입\nfunction* registerUser(action) {\n\ttry {\n\t\tconsole.log('resgister user');\n\t\tconst result = yield call(registerUserAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 로그인\nfunction* loginUser(action) {\n\ttry {\n\t\t// const result = yield call(loginUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_SUCCESS,\n\t\t\t// data: result.data,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n//로그아웃\nfunction* logoutUser(action) {\n\ttry {\n\t\t// const result = yield call(logoutUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_SUCCESS,\n\t\t\t// data: result.data,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 회원 가입\nfunction* watchRegisterUser() {\n\tconsole.log('watchRegister');\n\tyield takeLatest(REGISTER_USER_REQUEST, registerUser);\n}\n\n// 로그인\nfunction* watchLoginUser() {\n\tconsole.log('watchLgoinUser');\n\tyield takeLatest(LOGIN_USER_REQUEST, loginUser);\n}\n// 로그아웃\n\nfunction* watchLogoutUser() {\n\tyield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchRegisterUser),\n\t\tfork(watchLoginUser),\n\t\tfork(watchLogoutUser),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}