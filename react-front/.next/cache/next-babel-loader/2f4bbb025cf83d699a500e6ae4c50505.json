{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(registerUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginUser),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadMyInfo),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRegisterUser),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoginUser),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogoutUser),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMyInfo),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport { REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER_REQUEST, LOGOUT_USER_SUCCESS, LOGOUT_USER_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_SUCCESS } from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API'; //회원가입\n\nfunction registerUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function registerUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('resgister user');\n          _context.next = 4;\n          return call(registerUserAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return delay(1000);\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: REGISTER_USER_SUCCESS,\n            data: result.data // data: action.data,\n\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 16;\n          return put({\n            type: REGISTER_USER_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} // 로그인\n\n\nfunction loginUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loginUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginUserAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOGIN_USER_SUCCESS,\n            data: result.data // data: action.data,\n\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOGIN_USER_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} //로그아웃\n\n\nfunction logoutUser(action) {\n  return _regeneratorRuntime.wrap(function logoutUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put({\n            type: LOGOUT_USER_SUCCESS,\n            // data: result.data,\n            data: action.data\n          });\n\n        case 3:\n          _context3.next = 9;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 9;\n          return put({\n            type: LOGOUT_USER_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 5]]);\n} // 내 정보 서버로부터 불러오기\n\n\nfunction loadMyInfo(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMyInfo$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadMyInfoAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_MY_INFO_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_MY_INFO_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n} // 회원 가입\n\n\nfunction watchRegisterUser() {\n  return _regeneratorRuntime.wrap(function watchRegisterUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log('watchRegister');\n          _context5.next = 3;\n          return takeLatest(REGISTER_USER_REQUEST, registerUser);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // 로그인\n\n\nfunction watchLoginUser() {\n  return _regeneratorRuntime.wrap(function watchLoginUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('watchLgoinUser');\n          _context6.next = 3;\n          return takeLatest(LOGIN_USER_REQUEST, loginUser);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 로그아웃\n\n\nfunction watchLogoutUser() {\n  return _regeneratorRuntime.wrap(function watchLogoutUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // 내 정보 서버로부터 불러오기\n\n\nfunction watchLoadMyInfo() {\n  return _regeneratorRuntime.wrap(function watchLoadMyInfo$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchRegisterUser), fork(watchLoginUser), fork(watchLogoutUser), fork(watchLoadMyInfo)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/user.js"],"names":["registerUser","loginUser","logoutUser","loadMyInfo","watchRegisterUser","watchLoginUser","watchLogoutUser","watchLoadMyInfo","userSaga","all","fork","call","put","takeLatest","delay","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER_REQUEST","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_FAILURE","LOAD_MY_INFO_SUCCESS","registerUserAPI","loginUserAPI","logoutUserAPI","action","console","log","data","result","type","error","response","loadMyInfoAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport {\n\tREGISTER_USER_REQUEST,\n\tREGISTER_USER_SUCCESS,\n\tREGISTER_USER_FAILURE,\n\tLOGIN_USER_REQUEST,\n\tLOGIN_USER_SUCCESS,\n\tLOGIN_USER_FAILURE,\n\tLOGOUT_USER_REQUEST,\n\tLOGOUT_USER_SUCCESS,\n\tLOGOUT_USER_FAILURE,\n\tLOAD_MY_INFO_REQUEST,\n\tLOAD_MY_INFO_FAILURE,\n\tLOAD_MY_INFO_SUCCESS,\n} from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API';\n//회원가입\nfunction* registerUser(action) {\n\ttry {\n\t\tconsole.log('resgister user');\n\t\tconst result = yield call(registerUserAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 로그인\nfunction* loginUser(action) {\n\ttry {\n\t\tconst result = yield call(loginUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n//로그아웃\nfunction* logoutUser(action) {\n\ttry {\n\t\t// const result = yield call(logoutUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_SUCCESS,\n\t\t\t// data: result.data,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 내 정보 서버로부터 불러오기\nfunction* loadMyInfo(action) {\n\ttry {\n\t\tconst result = yield call(loadMyInfoAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_MY_INFO_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LOAD_MY_INFO_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 회원 가입\nfunction* watchRegisterUser() {\n\tconsole.log('watchRegister');\n\tyield takeLatest(REGISTER_USER_REQUEST, registerUser);\n}\n\n// 로그인\nfunction* watchLoginUser() {\n\tconsole.log('watchLgoinUser');\n\tyield takeLatest(LOGIN_USER_REQUEST, loginUser);\n}\n// 로그아웃\nfunction* watchLogoutUser() {\n\tyield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\n// 내 정보 서버로부터 불러오기\nfunction* watchLoadMyInfo() {\n\tyield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchRegisterUser),\n\t\tfork(watchLoginUser),\n\t\tfork(watchLogoutUser),\n\t\tfork(watchLoadMyInfo),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}