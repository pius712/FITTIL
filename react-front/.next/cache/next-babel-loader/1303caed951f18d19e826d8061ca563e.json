{"ast":null,"code":"var _jsxFileName = \"/Users/pius712/Documents/GitHub/fittil/react-front/component/WorkoutRecords.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { Calendar, Badge } from 'antd';\nimport moment from 'moment';\nmoment.locale('ko');\n\nconst WorkoutRecords = () => {\n  const {\n    0: today,\n    1: setToday\n  } = useState(moment()); // const [selectedValue, setSelectedValue] = useState(\n  // \tmoment().format('YYYY-MM-DD'),\n  // );\n\n  const getListData = useCallback(value => {\n    let listData;\n\n    switch (value.date()) {\n      case 8:\n        listData = [{\n          type: 'warning',\n          content: 'This is warning event.'\n        }, {\n          type: 'success',\n          content: 'This is usual event.'\n        }];\n        break;\n\n      case 10:\n        listData = [{\n          type: 'warning',\n          content: 'This is warning event.'\n        }, {\n          type: 'success',\n          content: 'This is usual event.'\n        }, {\n          type: 'error',\n          content: 'This is error event.'\n        }];\n        break;\n\n      case 15:\n        listData = [{\n          type: 'warning',\n          content: 'This is warning event'\n        }, {\n          type: 'success',\n          content: 'This is very long usual event。。....'\n        }, {\n          type: 'error',\n          content: 'This is error event 1.'\n        }, {\n          type: 'error',\n          content: 'This is error event 2.'\n        }, {\n          type: 'error',\n          content: 'This is error event 3.'\n        }, {\n          type: 'error',\n          content: 'This is error event 4.'\n        }];\n        break;\n\n      default:\n    }\n\n    return listData || [];\n  }, []);\n  const dateCellRender = useCallback(value => {\n    // console.log(moment(value).format('MMM Do YY'));\n    const listData = getListData(value);\n    return __jsx(\"ul\", {\n      className: \"events\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 4\n      }\n    }, listData.map(item => __jsx(\"li\", {\n      key: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }\n    }, __jsx(Badge, {\n      type: item.type,\n      text: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }))));\n  }, []); // value == 선택된 날짜\n\n  const getMonthData = useCallback(value => {\n    // console.log('getMonthData',value);\n    if (value.month() === 8) {\n      return 1394;\n    }\n  }, []); // value = 선택된 날짜\n\n  const monthCellRender = useCallback(value => {\n    // console.log('monthCellRender', value, typeof value);\n    const num = getMonthData(value);\n    return num ? __jsx(\"div\", {\n      className: \"notes-month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 4\n      }\n    }, __jsx(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, num), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, \"Backlog number\")) : null;\n  }, []);\n  return __jsx(Calendar // value={value}\n  , {\n    dateCellRender: dateCellRender,\n    monthCellRender: monthCellRender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default WorkoutRecords;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/component/WorkoutRecords.js"],"names":["React","useState","useCallback","Calendar","Badge","moment","locale","WorkoutRecords","today","setToday","getListData","value","listData","date","type","content","dateCellRender","map","item","getMonthData","month","monthCellRender","num"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Calendar, Badge } from 'antd';\nimport moment from 'moment';\n\nmoment.locale('ko');\n\nconst WorkoutRecords = () => {\n\tconst [today, setToday] = useState(moment());\n\t// const [selectedValue, setSelectedValue] = useState(\n\t// \tmoment().format('YYYY-MM-DD'),\n\t// );\n\tconst getListData = useCallback(value => {\n\t\tlet listData;\n\t\tswitch (value.date()) {\n\t\t\tcase 8:\n\t\t\t\tlistData = [\n\t\t\t\t\t{ type: 'warning', content: 'This is warning event.' },\n\t\t\t\t\t{ type: 'success', content: 'This is usual event.' },\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tlistData = [\n\t\t\t\t\t{ type: 'warning', content: 'This is warning event.' },\n\t\t\t\t\t{ type: 'success', content: 'This is usual event.' },\n\t\t\t\t\t{ type: 'error', content: 'This is error event.' },\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 15:\n\t\t\t\tlistData = [\n\t\t\t\t\t{ type: 'warning', content: 'This is warning event' },\n\t\t\t\t\t{ type: 'success', content: 'This is very long usual event。。....' },\n\t\t\t\t\t{ type: 'error', content: 'This is error event 1.' },\n\t\t\t\t\t{ type: 'error', content: 'This is error event 2.' },\n\t\t\t\t\t{ type: 'error', content: 'This is error event 3.' },\n\t\t\t\t\t{ type: 'error', content: 'This is error event 4.' },\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\treturn listData || [];\n\t}, []);\n\n\tconst dateCellRender = useCallback(value => {\n\t\t// console.log(moment(value).format('MMM Do YY'));\n\t\tconst listData = getListData(value);\n\t\treturn (\n\t\t\t<ul className=\"events\">\n\t\t\t\t{listData.map(item => (\n\t\t\t\t\t<li key={item.content}>\n\t\t\t\t\t\t<Badge type={item.type} text={item.content} />\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t);\n\t}, []);\n\t// value == 선택된 날짜\n\tconst getMonthData = useCallback(value => {\n\t\t// console.log('getMonthData',value);\n\t\tif (value.month() === 8) {\n\t\t\treturn 1394;\n\t\t}\n\t}, []);\n\t// value = 선택된 날짜\n\tconst monthCellRender = useCallback(value => {\n\t\t// console.log('monthCellRender', value, typeof value);\n\t\tconst num = getMonthData(value);\n\t\treturn num ? (\n\t\t\t<div className=\"notes-month\">\n\t\t\t\t<section>{num}</section>\n\t\t\t\t<span>Backlog number</span>\n\t\t\t</div>\n\t\t) : null;\n\t}, []);\n\n\treturn (\n\t\t<Calendar\n\t\t\t// value={value}\n\t\t\tdateCellRender={dateCellRender}\n\t\t\tmonthCellRender={monthCellRender}\n\t\t/>\n\t);\n};\n\nexport default WorkoutRecords;\n"]},"metadata":{},"sourceType":"module"}