{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE, UPLOAD_NOTE_REQUEST, UPLOAD_NOTE_SUCCESS, UPLOAD_NOTE_FAILURE, FETCH_NOTE_LENGTH_REQUEST, FETCH_NOTE_LENGTH_SUCCESS, FETCH_NOTE_LENGTH_FAILURE } from '../actions';\nimport { fetchNoteAPI, fetchNoteListAPI, uploadNoteAPI, fetchNoteLengthAPI } from '../API'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction* fetchNote(action) {\n  try {\n    const result = yield call(fetchNoteAPI, action.data);\n    yield put({\n      type: FETCH_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* fetchNoteList(action) {\n  try {\n    const result = yield call(fetchNoteListAPI, action.data);\n    yield put({\n      type: FETCH_NOTE_LIST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FETCH_NOTE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* uploadNote(action) {\n  try {\n    const result = yield call(uploadNoteAPI, action.data);\n    yield put({\n      type: UPLOAD_NOTE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_NOTE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* fetchNoteLength() {\n  try {\n    const result = yield call(fetchNoteLengthAPI);\n    yield put({\n      type: FETCH_NOTE_LENGTH_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    err.response.data;\n  }\n}\n\nfunction* watchFetchNote() {\n  yield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\n\nfunction* watchFetchNoteList() {\n  yield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\n\nfunction* watchUploadNote() {\n  yield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\n\nfunction* watchFecthNoteLength() {\n  yield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchFetchNote), fork(watchFetchNoteList), fork(watchUploadNote), fork(watchFecthNoteLength)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/note.js"],"names":["all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","UPLOAD_NOTE_REQUEST","UPLOAD_NOTE_SUCCESS","UPLOAD_NOTE_FAILURE","FETCH_NOTE_LENGTH_REQUEST","FETCH_NOTE_LENGTH_SUCCESS","FETCH_NOTE_LENGTH_FAILURE","fetchNoteAPI","fetchNoteListAPI","uploadNoteAPI","fetchNoteLengthAPI","fetchNote","action","result","data","type","err","console","error","response","fetchNoteList","uploadNote","fetchNoteLength","watchFetchNote","watchFetchNoteList","watchUploadNote","watchFecthNoteLength","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n\tUPLOAD_NOTE_REQUEST,\n\tUPLOAD_NOTE_SUCCESS,\n\tUPLOAD_NOTE_FAILURE,\n\tFETCH_NOTE_LENGTH_REQUEST,\n\tFETCH_NOTE_LENGTH_SUCCESS,\n\tFETCH_NOTE_LENGTH_FAILURE,\n} from '../actions';\nimport {\n\tfetchNoteAPI,\n\tfetchNoteListAPI,\n\tuploadNoteAPI,\n\tfetchNoteLengthAPI,\n} from '../API';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call(fetchNoteListAPI, action.data);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadNote(action) {\n\ttry {\n\t\tconst result = yield call(uploadNoteAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteLength() {\n\ttry {\n\t\tconst result = yield call(fetchNoteLengthAPI);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LENGTH_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\terr.response.data;\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nfunction* watchUploadNote() {\n\tyield takeLatest(UPLOAD_NOTE_REQUEST, uploadNote);\n}\nfunction* watchFecthNoteLength() {\n\tyield takeLatest(FETCH_NOTE_LENGTH_REQUEST, fetchNoteLength);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchFetchNote),\n\t\tfork(watchFetchNoteList),\n\t\tfork(watchUploadNote),\n\t\tfork(watchFecthNoteLength),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}