{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchNote),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchNoteList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNote),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchNoteList),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport 'redux-saga/effects';\nimport { FETCH_NOTE_LIST_REQUEST, FETCH_NOTE_REQUEST, FETCH_NOTE_LIST_SUCCESS, FETCH_NOTE_FAILURE, FETCH_NOTE_SUCCESS, FETCH_NOTE_LIST_FAILURE } from '../actions';\nimport next from 'next';\nimport { Result } from 'antd'; // function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\n\nfunction fetchNote(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNote$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call();\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: FETCH_NOTE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: FETCH_NOTE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction fetchNoteList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchNoteList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call();\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: FETCH_NOTE_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: FETCH_NOTE_LIST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchFetchNote() {\n  return _regeneratorRuntime.wrap(function watchFetchNote$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchFetchNoteList() {\n  return _regeneratorRuntime.wrap(function watchFetchNoteList$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/post.js"],"names":["fetchNote","fetchNoteList","watchFetchNote","watchFetchNoteList","postSaga","all","fork","call","put","takeLatest","FETCH_NOTE_LIST_REQUEST","FETCH_NOTE_REQUEST","FETCH_NOTE_LIST_SUCCESS","FETCH_NOTE_FAILURE","FETCH_NOTE_SUCCESS","FETCH_NOTE_LIST_FAILURE","next","Result","action","result","type","data","console","error","response"],"mappings":";;oDA4BUA,S;qDAeAC,a;qDAeAC,c;qDAGAC,kB;qDAGeC,Q;;AAhEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAe,oBAAf;AACA,SACCC,uBADD,EAECC,kBAFD,EAGCC,uBAHD,EAICC,kBAJD,EAKCC,kBALD,EAMCC,uBAND,QAOO,YAPP;AAQA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,MAAT,QAAuB,MAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAUjB,SAAV,CAAoBkB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMX,IAAI,EAAV;;AAFjB;AAEQY,UAAAA,MAFR;AAAA;AAGE,iBAAMX,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAEN,kBADG;AAETO,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,WAAD,CAAT;;AAHF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQEC,UAAAA,OAAO,CAACC,KAAR;AARF;AASE,iBAAMf,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAEP,kBADG;AAETU,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaH;AAFX,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUpB,aAAV,CAAwBiB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMX,IAAI,EAAV;;AAFjB;AAEQY,UAAAA,MAFR;AAAA;AAGE,iBAAMX,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAER,uBADG;AAETS,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,WAAD,CAAT;;AAHF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQEC,UAAAA,OAAO,CAACC,KAAR;AARF;AASE,iBAAMf,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAEL,uBADG;AAETQ,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaH;AAFX,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUnB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMO,UAAU,CAACE,kBAAD,EAAqBX,SAArB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACC,uBAAD,EAA0BT,aAA1B,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,cAAD,CAAL,EAAuBI,IAAI,CAACH,kBAAD,CAA3B,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {} from 'redux-saga/effects';\nimport {\n\tFETCH_NOTE_LIST_REQUEST,\n\tFETCH_NOTE_REQUEST,\n\tFETCH_NOTE_LIST_SUCCESS,\n\tFETCH_NOTE_FAILURE,\n\tFETCH_NOTE_SUCCESS,\n\tFETCH_NOTE_LIST_FAILURE,\n} from '../actions';\nimport next from 'next';\nimport { Result } from 'antd';\n\n// function* name() {\n// \ttry {\n// \t\tyield call();\n// \t\tyield put({\n// \t\t\ttype: '',\n// \t\t\tdata: '',\n// \t\t});\n// \t} catch (err) {\n// \t\tconsole.error(err);\n// yield put({\n// \ttype:'',\n// \terror:''\n// })(err);\n// \t}\n// }\nfunction* fetchNote(action) {\n\ttry {\n\t\tconst result = yield call();\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* fetchNoteList(action) {\n\ttry {\n\t\tconst result = yield call();\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: FETCH_NOTE_LIST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchFetchNote() {\n\tyield takeLatest(FETCH_NOTE_REQUEST, fetchNote);\n}\nfunction* watchFetchNoteList() {\n\tyield takeLatest(FETCH_NOTE_LIST_REQUEST, fetchNoteList);\n}\nexport default function* postSaga() {\n\tyield all([fork(watchFetchNote), fork(watchFetchNoteList)]);\n}\n"]},"metadata":{},"sourceType":"module"}