{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user.js';\nimport note from './note.js';\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', HYDRATE);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      {\n        // 리듀서는 결국 state, action을 받는 함수이다. 그리고 state를 반환한다.\n        // combineReducer를 호출하면 이 함수가 나온다.\n        var combinedReducer = combineReducers({\n          user: user,\n          note: note\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/reducer/index.js"],"names":["combineReducers","HYDRATE","user","note","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKN,OAAL;AACCO,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,OAAvB;AACA,6CAAYI,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAED;AAAS;AACR;AACA;AACA,YAAMC,eAAe,GAAGX,eAAe,CAAC;AAAEE,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,IAAI,EAAJA;AAAR,SAAD,CAAvC;AACA,eAAOQ,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACA;AAVF;AAYA,CAbD;;AAeA,eAAeF,WAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport { HYDRATE } from 'next-redux-wrapper';\n\nimport user from './user.js';\nimport note from './note.js';\n\nconst rootReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase HYDRATE:\n\t\t\tconsole.log('HYDRATE', HYDRATE);\n\t\t\treturn { ...state, ...action.payload };\n\n\t\tdefault: {\n\t\t\t// 리듀서는 결국 state, action을 받는 함수이다. 그리고 state를 반환한다.\n\t\t\t// combineReducer를 호출하면 이 함수가 나온다.\n\t\t\tconst combinedReducer = combineReducers({ user, note });\n\t\t\treturn combinedReducer(state, action);\n\t\t}\n\t}\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}