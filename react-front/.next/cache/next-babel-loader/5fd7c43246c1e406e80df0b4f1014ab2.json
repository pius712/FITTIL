{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER_REQUEST, LOGIN_USER_REQUEST, LOGOUT_USER_REQUEST, REGISTER_USER_FAILURE } from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API'; //회원가입\n\nfunction* registerUSer(action) {\n  try {\n    const result = yield call(registerUserAPI, action.data);\n  } catch (err) {\n    yield put({\n      type: REGISTER_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 로그인\n\n\nfunction* loginUser(action) {\n  try {} catch (err) {\n    yield put({\n      type: LOGIN_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} //로그아웃\n\n\nfunction* logoutUser(action) {\n  try {} catch (err) {\n    yield put({\n      type: LOGOUT_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 회원 가입\n\n\nfunction* watchRegisterUser() {\n  yield takeLatest(REGISTER_USER_REQUEST, registerUSer);\n} // 로그인\n\n\nfunction* watchLoginUser() {\n  yield takeLatest(LOGIN_USER_REQUEST, loginUser);\n} // 로그아웃\n\n\nfunction* watchLogoutUser() {\n  yield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\n\nexport default function* userSaga() {\n  yield all(fork(watchRegisterUser), fork(watchLoginUser), fork(watchLogoutUser));\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/fittil/react-front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","REGISTER_USER_REQUEST","LOGIN_USER_REQUEST","LOGOUT_USER_REQUEST","REGISTER_USER_FAILURE","registerUserAPI","loginUserAPI","logoutUserAPI","registerUSer","action","result","data","err","type","error","response","loginUser","LOGIN_USER_FAILURE","logoutUser","LOGOUT_USER_FAILURE","watchRegisterUser","watchLoginUser","watchLogoutUser","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACCC,qBADD,EAECC,kBAFD,EAGCC,mBAHD,EAICC,qBAJD,QAKO,YALP;AAMA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,QAA6D,QAA7D,C,CACA;;AACA,UAAUC,YAAV,CAAuBC,MAAvB,EAA+B;AAC9B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACO,eAAD,EAAkBI,MAAM,CAACE,IAAzB,CAAzB;AACA,GAFD,CAEE,OAAOC,GAAP,EAAY;AACb,UAAMb,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAET,qBADG;AAETU,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUK,SAAV,CAAoBP,MAApB,EAA4B;AAC3B,MAAI,CACH,CADD,CACE,OAAOG,GAAP,EAAY;AACb,UAAMb,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEI,kBADG;AAETH,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUO,UAAV,CAAqBT,MAArB,EAA6B;AAC5B,MAAI,CACH,CADD,CACE,OAAOG,GAAP,EAAY;AACb,UAAMb,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEM,mBADG;AAETL,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFX,KAAD,CAAT;AAIA;AACD,C,CACD;;;AACA,UAAUS,iBAAV,GAA8B;AAC7B,QAAMpB,UAAU,CAACC,qBAAD,EAAwBO,YAAxB,CAAhB;AACA,C,CAED;;;AACA,UAAUa,cAAV,GAA2B;AAC1B,QAAMrB,UAAU,CAACE,kBAAD,EAAqBc,SAArB,CAAhB;AACA,C,CACD;;;AAEA,UAAUM,eAAV,GAA4B;AAC3B,QAAMtB,UAAU,CAACG,mBAAD,EAAsBe,UAAtB,CAAhB;AACA;;AACD,eAAe,UAAUK,QAAV,GAAqB;AACnC,QAAM3B,GAAG,CACRC,IAAI,CAACuB,iBAAD,CADI,EAERvB,IAAI,CAACwB,cAAD,CAFI,EAGRxB,IAAI,CAACyB,eAAD,CAHI,CAAT;AAKA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport {\n\tREGISTER_USER_REQUEST,\n\tLOGIN_USER_REQUEST,\n\tLOGOUT_USER_REQUEST,\n\tREGISTER_USER_FAILURE,\n} from '../actions';\nimport { registerUserAPI, loginUserAPI, logoutUserAPI } from '../API';\n//회원가입\nfunction* registerUSer(action) {\n\ttry {\n\t\tconst result = yield call(registerUserAPI, action.data);\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REGISTER_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 로그인\nfunction* loginUser(action) {\n\ttry {\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGIN_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n//로그아웃\nfunction* logoutUser(action) {\n\ttry {\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOGOUT_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n// 회원 가입\nfunction* watchRegisterUser() {\n\tyield takeLatest(REGISTER_USER_REQUEST, registerUSer);\n}\n\n// 로그인\nfunction* watchLoginUser() {\n\tyield takeLatest(LOGIN_USER_REQUEST, loginUser);\n}\n// 로그아웃\n\nfunction* watchLogoutUser() {\n\tyield takeLatest(LOGOUT_USER_REQUEST, logoutUser);\n}\nexport default function* userSaga() {\n\tyield all(\n\t\tfork(watchRegisterUser),\n\t\tfork(watchLoginUser),\n\t\tfork(watchLogoutUser),\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}